//начало текста модуля

///////////////////////////////////////////////////
//Служебные функции и процедуры
///////////////////////////////////////////////////

&НаКлиенте
// контекст фреймворка Vanessa-Behavior
Перем Ванесса;
 
&НаКлиенте
// Структура, в которой хранится состояние сценария между выполнением шагов. Очищается перед выполнением каждого сценария.
Перем Контекст Экспорт;
 
&НаКлиенте
// Структура, в которой можно хранить служебные данные между запусками сценариев. Существует, пока открыта форма Vanessa-Behavior.
Перем КонтекстСохраняемый Экспорт;

&НаКлиенте
// Функция экспортирует список шагов, которые реализованы в данной внешней обработке.
Функция ПолучитьСписокТестов(КонтекстФреймворкаBDD) Экспорт
	Ванесса = КонтекстФреймворкаBDD;
	
	ВсеТесты = Новый Массив;

	//описание параметров
	//Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,Снипет,ИмяПроцедуры,ПредставлениеТеста,Транзакция,Параметр);

	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ЯИспользуюЭтотШаг()","ЯИспользуюЭтотШаг","Когда я использую этот шаг");
	Ванесса.ДобавитьШагВМассивТестов(ВсеТесты,"ПроверяетсяСуществованиеЭлементаСНаименованиемВСправочнике(Парам01,Парам02)","ПроверяетсяСуществованиеЭлементаСНаименованиемВСправочнике","Тогда проверяется существование элемента с наименованием ""НаименованиеЭлемента"" в справочнике  ""НаименованиеСправочника""");

	Возврат ВсеТесты;
КонецФункции
	
&НаСервере
// Служебная функция.
Функция ПолучитьМакетСервер(ИмяМакета)
	ОбъектСервер = РеквизитФормыВЗначение("Объект");
	Возврат ОбъектСервер.ПолучитьМакет(ИмяМакета);
КонецФункции
	
&НаКлиенте
// Служебная функция для подключения библиотеки создания fixtures.
Функция ПолучитьМакетОбработки(ИмяМакета) Экспорт
	Возврат ПолучитьМакетСервер(ИмяМакета);
КонецФункции



///////////////////////////////////////////////////
//Работа со сценариями
///////////////////////////////////////////////////

&НаКлиенте
// Процедура выполняется перед началом каждого сценария
Процедура ПередНачаломСценария() Экспорт
	
КонецПроцедуры

&НаКлиенте
// Процедура выполняется перед окончанием каждого сценария
Процедура ПередОкончаниемСценария() Экспорт
	
КонецПроцедуры



///////////////////////////////////////////////////
//Реализация шагов
///////////////////////////////////////////////////

&НаКлиенте
//Когда я использую этот шаг
//@ЯИспользуюЭтотШаг()
Процедура ЯИспользуюЭтотШаг() Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
КонецПроцедуры

&НаКлиенте
//Тогда проверяется существование элемента с наименованием "НаименованиеЭлемента" в справочнике  "НаименованиеСправочника"
//@ПроверяетсяСуществованиеЭлементаСНаименованиемВСправочнике(Парам01,Парам02)
Процедура ПроверяетсяСуществованиеЭлементаСНаименованиемВСправочнике(НаименованиеЭлемента,НаименованиеСправочника) Экспорт
	//Ванесса.ПосмотретьЗначение(Парам01,Истина);
	//ВызватьИсключение "Не реализовано.";
	Если НЕ АсертЭлементСправочникаСуществует(НаименованиеСправочника,НаименованиеЭлемента) Тогда 
		ТекстИсключения =  "Элемент "+НаименованиеЭлемента+" справочника "+НаименованиеСправочника+" НЕ Существует!";
		ВызватьИсключение ТекстИсключения;
	КонецЕсли;	
КонецПроцедуры


&НаСервере
Функция  АсертЭлементСправочникаСуществует(НаименованиеСправочника,НаименованиеЭлемента)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ
	                |	НужныйСправочник.Ссылка
	                |ИЗ
	                |	Справочник."+НаименованиеСправочника+" КАК НужныйСправочник
	                |ГДЕ
	                |	НужныйСправочник.Наименование = &Наименование" ;
					
	Запрос.УстановитьПараметр("Наименование",НаименованиеЭлемента);
	Результат = Запрос.Выполнить();
	
	Возврат НЕ Результат.Пустой();
	
КонецФункции	

//окончание текста модуля